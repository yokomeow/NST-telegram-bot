import config
import logging
import nst
import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.executor import start_webhook

from shutil import copyfile


# webhook settings
# WEBHOOK_HOST = 'https://your.domain'
# WEBHOOK_PATH = '/path/to/api'
# WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# webserver settings
# WEBAPP_HOST = 'localhost'  # or ip
# WEBAPP_PORT = 3001

# port
# PORT = int(os.environ.get('PORT', 5000))

# logging level
logging.basicConfig(level=logging.INFO)

# initialize bot
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)


# start message
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    sti = open('images/source/start-sticker.webp', 'rb')
    await bot.send_sticker(message.chat.id, sti)

    # keyboard
    markup_general = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1_general = types.KeyboardButton('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ üåÖ')
    button2_general = types.KeyboardButton('–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä ü§∑‚Äç‚ôÄÔ∏è')

    markup_general.add(button1_general, button2_general)

    await bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, —Å—Ç–∏–ª—å–Ω—ã–π '
                                            '–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –ª—é–±—É—é —Ç–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ '
                                            '–∏—Å–∫—É—Å—Å—Ç–≤–∞!'.format(message.from_user, await bot.get_me()),
                           parse_mode='html', reply_markup=markup_general)
    await bot.send_message(message.chat.id, '–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? ‚û°Ô∏è /help')


# help
@dp.message_handler(commands=['help'])
async def help_message(message: types.Message):
    await bot.send_message(message.chat.id, '–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ç–∏–ª—å —Å –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –¥—Ä—É–≥—É—é. –¢–µ–±–µ '
                                            '–ª–∏—à—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–µ–æ–±—Ä–∞–∑–∏—Ç—å. –î–∞–ª–µ–µ, '
                                            '—Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∏–ª–µ–π –Ω–∞ –≤—ã–±–æ—Ä. –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä '
                                            '–æ–±—Ä–∞–±–æ—Ç–∫–∏, –º–æ–∂–µ—à—å —Ç–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä ü§∑‚Äç‚ôÄÔ∏è"')


# chat
@dp.message_handler(content_types=['text'])
async def chat(message: types.Message):
    if message.chat.type == 'private':
        if message.text == '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ üåÖ':
            await bot.send_message(message.chat.id,
                                   '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. '
                                   '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –æ–±—ä–µ–∫—Ç –Ω–∞ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª—Å—è –ø–æ —Ü–µ–Ω—Ç—Ä—É, —Ç–∞–∫ –∫–∞–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ '
                                   '–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –∫–∞–¥—Ä–∏—Ä—É–µ—Ç—Å—è.')
        elif message.text == '–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä ü§∑‚Äç‚ôÄÔ∏è':
            content_pic = open('images/source/city-sunset.jpg', 'rb')
            result_pic = open('images/results/result-4.png', 'rb')

            reply_markup = types.InlineKeyboardMarkup(row_width=2, one_time_keyboard=True)
            reply_button1 = types.InlineKeyboardButton('–ö—Ä—É—Ç–æ! üòç', callback_data='good')
            reply_button2 = types.InlineKeyboardButton('–¢–∞–∫ —Å–µ–±–µ.. üòí', callback_data='bad')

            reply_markup.add(reply_button1, reply_button2)

            await bot.send_photo(message.chat.id, content_pic)
            await bot.send_message(message.chat.id, '–ù–∞–ø—Ä–∏–º–µ—Ä, —Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Ñ–æ—Ç–æ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∑–∞–∫–∞—Ç–µ... ‚¨ÜÔ∏è')
            await bot.send_photo(message.chat.id, result_pic)
            await bot.send_message(message.chat.id, '...–∞ —è –¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ —Ñ–æ—Ç–æ –¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞! ‚¨ÜÔ∏è',
                                   reply_markup=reply_markup)

        else:
            await bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üòø')


# save photo
@dp.message_handler(content_types=['photo'])
async def handle_photo(message: types.Message):
    await message.photo[-1].download('./images/source/content_image.jpg')
    await bot.send_message(message.chat.id, '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!')

    style_reply_markup = types.InlineKeyboardMarkup(row_width=2, one_time_keyboard=True)
    style_reply_button1 = types.InlineKeyboardButton('–í–∞–Ω –ì–æ–≥ (1)', callback_data='gogh')
    style_reply_button2 = types.InlineKeyboardButton('–ü–∏–∫–∞—Å—Å–æ (2)', callback_data='picasso')
    style_reply_button3 = types.InlineKeyboardButton('–ê—Ñ—Ä–µ–º–æ–≤ (3)', callback_data='afremov')

    style_reply_markup.add(style_reply_button1, style_reply_button2, style_reply_button3)

    style_pic1 = open('images/source/van_gogh.jpg', 'rb')
    style_pic2 = open('images/source/picasso.jpg', 'rb')
    style_pic3 = open('images/source/afremov.jpg', 'rb')

    await bot.send_photo(message.chat.id, style_pic1)
    await bot.send_photo(message.chat.id, style_pic2)
    await bot.send_photo(message.chat.id, style_pic3)
    await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å:', reply_markup=style_reply_markup)


# callback
@dp.callback_query_handler(lambda call: True)
async def callback_inline(call):
    try:
        if call.message:
            # example feedback
            if call.data == 'good':
                await bot.send_message(call.message.chat.id, '–†–∞–¥, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! ü•∞')
            elif call.data == 'bad':
                await bot.send_message(call.message.chat.id, '–õ—é–¥–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–Ω–∏–º–∞–ª–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∏–∫–æ–≤... üòî')
            # style
            elif call.data == 'gogh':
                await bot.send_message(call.message.chat.id, '"–ó–≤–µ–∑–¥–Ω–∞—è –ù–æ—á—å" - —Ö–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä! üåÉ')
                copyfile('images/source/van_gogh.jpg', 'images/source/style_image.jpg')
                await launch_nst(call.message)
            elif call.data == 'picasso':
                await bot.send_message(call.message.chat.id, '–ü–∏–∫–∞—Å—Å–æ - –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! üåö')
                copyfile('images/source/picasso.jpg', 'images/source/style_image.jpg')
                await launch_nst(call.message)
            elif call.data == 'afremov':
                await bot.send_message(call.message.chat.id, '–ß—É–¥–µ—Å–Ω–∞—è –∑–∞–¥—É–º–∫–∞! üå∫')
                copyfile('images/source/afremov.jpg', 'images/source/style_image.jpg')
                await launch_nst(call.message)
            # result feedback
            elif call.data == 'amazing':
                await bot.send_message(call.message.chat.id, '–ö—Ä—É—Ç–æ! –°–∞–º –≤ —à–æ–∫–µ, —á—Ç–æ —Ç–∞–∫ –∫–ª–∞—Å—Å–Ω–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å! üí•')
            elif call.data == 'nice':
                await bot.send_message(call.message.chat.id, '–°—É–ø–µ—Ä! üëç')
            elif call.data == 'ok':
                await bot.send_message(call.message.chat.id, '–ú–æ–∂–µ—Ç, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —É –º–µ–Ω—è –ª—É—á—à–µ –ø–æ–ª—É—á–∏—Ç—Å—è. üòï')
            elif call.data == 'gross':
                await bot.send_message(call.message.chat.id, '–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ–∂–¥—É –Ω–∞–º–∏... üëâüëà')

            # remove inline buttons
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='...',
                                        reply_markup=None)
    except Exception as e:
        print(repr(e))

1589660470:AAF6u8t2kdtwO3smV_pODxUqndIOo0OmZww
# launch style transfer
async def launch_nst(message):
    # print('ok')
    content_image_name = 'images/source/content_image.jpg'
    style_image_name = 'images/source/style_image.jpg'
    content = open(content_image_name, 'rb')
    style = open(style_image_name, 'rb')

    await bot.send_photo(message.chat.id, content)
    await bot.send_message(message.chat.id, '–ù–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. ‚öôÔ∏è')

    await bot.send_photo(message.chat.id, style)
    await bot.send_message(message.chat.id, '–° —Ç–∞–∫–∏–º —Å—Ç–∏–ª–µ–º.')

    await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 6-7 –º–∏–Ω—É—Ç...')

    await nst.main(content_image_name, style_image_name)

    await bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ!')
    result = open('images/results/bot-result.png', 'rb')
    await bot.send_photo(message.chat.id, result)

    result_reply_markup = types.InlineKeyboardMarkup(row_width=2)
    result_reply_button1 = types.InlineKeyboardButton('–í–∞—É, —à–∏–∫–∞—Ä–Ω–æ!', callback_data='amazing')
    result_reply_button2 = types.InlineKeyboardButton('–û—á–µ–Ω—å –¥–∞–∂–µ –Ω–µ–ø–ª–æ—Ö–æ', callback_data='nice')
    result_reply_button3 = types.InlineKeyboardButton('–ù–æ—Ä–º–∞–ª—å–Ω–æ', callback_data='ok')
    result_reply_button4 = types.InlineKeyboardButton('–û–π...–∫–æ—à–º–∞—Ä', callback_data='gross')

    result_reply_markup.add(result_reply_button1, result_reply_button2, result_reply_button3, result_reply_button4)

    await bot.send_message(message.chat.id, '–ù—É, –∫–∞–∫ —Ç–µ–±–µ? üßê', reply_markup=result_reply_markup)
    await bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ. ‚ò∫Ô∏è')


# async def on_startup(dp):
#    await bot.set_webhook(WEBHOOK_URL)
    # insert code here to run it after start


# async def on_shutdown(dp):
#    logging.warning('Shutting down..')

    # insert code here to run it before shutdown

    # Remove webhook (not acceptable in some cases)
#    await bot.delete_webhook()

    # Close DB connection (if used)
#    await dp.storage.close()
#    await dp.storage.wait_closed()

 #   logging.warning('Bye!')


# launch long polling
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    #start_webhook(listen='0.0.0.0', port=int(PORT), url_path=config.TOKEN)
    #executor.set_webhook('https://style-tg-bot.herokuapp.com/' + config.TOKEN)
    #start_webhook(
    #    dispatcher=dp,
    #    webhook_path=WEBHOOK_PATH,
    #    on_startup=on_startup,
    #    on_shutdown=on_shutdown,
    #    skip_updates=True,
    #    host=WEBAPP_HOST,
    #    port=WEBAPP_PORT,
    #)
